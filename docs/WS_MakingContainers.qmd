---
title: "Building Containers for HPC"
author: "Charles Peterson"
format:
  revealjs:
    transition: slide
    theme: [custom.scss]
    scrollable: true
    self-contained: true
from: markdown+emoji
---

## :memo: Overview {.smaller}

:wave: Welcome!


In this workshop, we will explore the advanced use of containers on HPC resources,
like UCLA's Hoffman2. This is a follow-up to a previous workshop ["Containers for HPC Resources"](https://github.com/ucla-oarc-hpc/WS_containers)

:::: columns
::: {.column .fragment width="40%"}

-   :rocket: Dive into advanced container topics
-   :toolbox: Build containers tailored for HPC resources

:::
::: {.column .fragment width="60%"}

- :bulb: Got suggestions for upcoming workshops? 
- cpeterson\@oarc.ucla.edu

:::
::::

## :file_folder: Files for this Presentation { style="font-size: 0.75em" }

:eyes: Viewing the slides

<https://github.com/ucla-oarc-hpc/WS_MakingContainers>

- html format: <https://ucla-oarc-hpc.github.io/WS_MakingContainers/>
- PDF format: `WS_MakingContainers.pdf`

::: callout-note
This presentation was created with [Quarto](https://quarto.org/) and
RStudio.

-   Quarto file: `WS_MakingContainers.qmd`
:::

## Hands-on Exercise Setup

:::{ style="font-size: 0.60em" } 
In this workshop, we will engage in hands-on exercises.

```{.bash}
git clone https://github.com/ucla-oarc-hpc/WS_MakingContainers
```

**Requirements:**

- A computer with admin access 
- Install [Apptainer](https://github.com/apptainer/apptainer/blob/main/INSTALL.md)
- Install either [Docker](https://docs.docker.com/engine/install/ubuntu/) or [Podman](https://podman.io/getting-started/installation#installing-on-linux)
  - In this workshop, we will be using Podman
- Note: MacOS (or other ARM-based systems) will not work for this exercise

**Alternative: Virtual Machine**

Pre-configured Virtual Machine (VM) available on [BOX](https://ucla.box.com/s/6fsinqhvsv3ywf9wmg30565iw7l8wvt1)

- VM file: `wscontainer.ova`
  - Recommended for use with VirtualBox
- Username/Password: wscontainer/wscontainer

:::

# :arrows_counterclockwise: Container Review

## :package: Containers 

![](container_apps.png){.absolute top="100" left="100"}

## :hammer_and_wrench: Software for Containers { style="font-size: 0.90em" }

:::: columns
::: {.column width="40%"}

![](word_cloud.png){.absolute bottom="150" width="35%"}

:::
::: {.column width="60%"}
Apptainer

-   Formerly Singularity
-   :dart: Designed and developed for HPC systems
-   :wrench: Most likely installed on most HPC systems
-   :rocket: Supports Infiniband, GPUs, MPI, and other devices on the Host
-   :whale: Can run Docker containers

:::
::::

## :hammer_and_wrench: Software for Containers

:::: columns
::: {.column width="40%"}

![](word_cloud.png){.absolute bottom="150" width="35%"}

:::
::: {.column width="60%"}

Docker

-   :star: Very popular
-   :cloud: Many popular cloud container registries
    -   DockerHub, GitHub, Nvidia NGC
-   :no_entry_sign: MPI not well supported
-   :construction: Most likely NOT available on many HPC systems

:::
::::

## :wrench: Software for Containers

:::: columns
::: {.column width="40%"}

![](word_cloud.png){.absolute bottom="150" width="35%"}

:::
::: {.column width="60%"}

Podman

-   :link: Similar syntax as with Docker
    - :arrows_counterclockwise: Can use to 'replace' Docker
-   :no_entry_sign: Doesn't have a root daemon process
-   :desktop_computer:  On some HPC resources (not on Hoffman2, yet)

:::
::::


## Apptainer Workflow for running on H2 :arrows_counterclockwise:

:::: columns
::: {.column width="30%"}

1. Create :hammer_and_wrench:

2. Transfer :arrow_right_hook:

3. Run :arrow_forward:

:::
::: {.column .fragment width="60%"}
:::
::::

## Apptainer Workflow (Create) :hammer_and_wrench:

:::: columns
::: {.column width="30%"}

**1. Create** :hammer_and_wrench:

2. Transfer

3. Run

:::
::: {.column .fragment width="60%" style="font-size: 0.75em"}

- Build a container 
  - From Apptainer or Docker on your computer 
  - Where you have root/sudo access
  - Typically, Apptainer containers end in `.sif`

- Use a pre-built container:
  - Search Container Registries 
  - [DockerHub](https://hub.docker.com/), [GitHub packages](https://github.com/features/packages), [Nvidia NGC](https://catalog.ngc.nvidia.com/)
  - On H2, `$H2_CONTAINER_LOC`

:::
::::


## Apptainer Workflow (Transfer) :arrow_right_hook:

:::: columns
::: {.column width="30%"}

1. Create

**2. Transfer** :arrow_right_hook:

3. Run

:::
::: {.column .fragment width="60%" style="font-size: 0.80em"}

Bring your container to Hoffman2:

- Copy your container to Hoffman2

```{.bash }
scp test.sif username@hoffman2.idre.ucla.edu
```

-   Pull a container from Container Register

```{.bash }
apptainer pull docker://ubuntu:20.04
```

-   Use a container pre-built on Hoffman2

```{.bash }
module load apptainer
ls $H2_CONTAINER_LOC
```

:::
::::

## Apptainer workflow (Run) :arrow_forward:

:::: columns
::: {.column width="30%"}

Create

Transfer

**Run** :arrow_forward:

:::
::: {.column .fragment width="60%" style="font-size: 0.70em"}

Run Apptainer on your container:

- Can run in an interactive (qrsh) session

```{.bash}
qrsh -l h_data=20G
module load apptainer
apptainer exec mypython.sif python3 test.py
```

- Or run as a Batch (qsub) job

- Create job script `myjob.job`

```{.bash}
#!/bin/bash
#$ -l h_data=20G
module load apptainer
apptainer exec mypython.sif python3 test.py
```

- Submit your job

```{.bash}
qsub myjob.job
```

:::
::::

## :star: Common Usage

::: {style="font-size: 0.75em"}

On Hoffman2, to use apptainer, all you need to do is load the module

```{.bash}
module load apptainer
```

- :tada: Only module you need to load!
- No need to load tons of modules to run a single application
- :globe_with_meridians: Expect MPI module if running parallel
    - `module load intel/2022.1.1`

::: {.fragment}
### :books: Common Apptainer commands

:::: columns
::: {.column}

- :outbox_tray: Getting a container from somewhere

::: 
::: {.column}

```{.bash}
apptainer pull [options]
apptainer pull docker://ubuntu:22.04
```

:::
::::
:::: columns
::: {.column}

- :factory: Build a container

::: 
::: {.column}

```{.bash}
apptainer build [options]
apptainer build myapp.sif myapp.def
```

:::
::::
:::: columns
::: {.column}

- :runner: Run a single command inside of a container

::: 
::: {.column}

```{.bash}
apptainer exec [options]
apptainer exec myapp.sif MYCOMMAND
```

::: 
:::: 
:::: columns
::: {.column}

- :scroll: Run the the container with a predefined script

::: 
::: {.column}

```{.bash}
apptainer run [options]
apptainer run myapp.sif "SCRIPT ARGRMENTS"
```

:::
::::
:::
:::

# Building Containers

## Building Overview üèóÔ∏è

There are serveral ways to build containers for **Apptainer**

Basic Build Command

- Use `apptainer build` to build new containers

Typically, you will use the **build** command by 

```{.bash}
apptainer build <New Image> <Build Path>
```

- <New Image> is the name you want to give to the new image.
- <Build Spec> is the method apptainer will use to build the container

## Building from an Existing Image üì¶

::: {style="font-size: 0.80em"}

- Typically, you will build a container is by using an existing container as a base.

```{.bash}
apptainer build myubuntu.sif docker://ubuntu:22.04
```

- This will create a new container file, **myubuntu.sif**, using the official Ubuntu 22.04 image from DockerHub.
- Note: SIF containers are immutable 
  - Once built, they cannot be modified.

- You can run your `apptainer` commands from this new container.

```{.bash}
apptainer shell myubuntu.sif
apptainer exec myubuntu.sif echo "Hi"
```

:::

## Sandbox (Writable Containers) üèóÔ∏è

::: {style="font-size: 0.80em"}

If you need a container that allows modifications, use the sandbox feature.

- Sandbox directories
  - Create a container within a writable directory (Sandbox) 
  - Great to expermint installing software

```{.bash}  
sudo apptainer build --sandbox myubuntu-SB docker://ubuntu:22.04
```

- This create a directory **myubuntu-SB** that has the contents of the ubuntu image from DockerHub.
- Note the use of `sudo`
  - To ensure proper file permissions it is recommended to run this as an admin

:::{.callout-note}

This new Sandbox image does **NOT** have the .sif extension because this is a directory, not a single file.

:::
:::

## Using Sandbox Containers üèóÔ∏è

::: {style="font-size: 0.80em"}

- You can enter the sandbox container and modify it
  - Use `--writable` flag

```{.bash}
sudo apptainer shell --writable myubuntu-SB
```

  - Any modifications inside the sandbox persist after you exit.

Once you‚Äôre satisfied with the changes, convert it to a **SIF container**:

```{.bash}
sudo apptainer build myNewUbuntu.sif myubuntu-SB
```

This packages the modified sandbox into a **read-only** .sif container called **myNewUbuntu.sif**.

:::

## Building with a Definition File üìú 

::: {style="font-size: 0.80em"}

A definition file provides precise instructions on how to build and configure a container.

```{.bash}
apptainer build myapp.sif myapp.def
```

- Building from Apptainer definition files
  - Build a container from a **definition file** that has detailed information on how to install software inside the container
  - `apptainer build myapp.sif myapp.def`
    - **myapp.sif** is the new container built
    - **myapp.def** is the definition file

This definition file details how the new container would be build

:::

## Example definition file üîß

::: {style="font-size: 0.60em"}

:::: columns
::: {.column width="35%"}

File: **lolcow.def**

```{.bash}
Bootstrap: docker
From: docker.io/ubuntu:22.04

%labels
Example from apptainer.org

%post
    apt-get -y update
    apt-get -y install cowsay lolcat

%environment
    export LC_ALL=C
    export PATH=/usr/games:$PATH

%runscript
    date | cowsay | lolcat
```

:::
::: {.column width="65%"}

- `%Bootstrap` - Specifies how to pull the base OS (e.g., from Docker).
  - **docker** bootstrap will pull docker format layers
- `%From` - Location and name of **docker** container
  - **docker.io** - DockerHub
  - **ghcr.io** - GitHub Packages
- `%labels` - Add textual metadata information to container
- `%post` - Commands to setup the container from the baseOS the final container
- `%environment` - Define environment variables inside container
- `%runscript` - Specifies the command that runs when using `apptainer run`

:::
::::

In this example, we start with the Ubuntu 22.04 as a base OS. Then run commands from **%post** to create the final container. 

:::

## Running from Definition File üèÉ

::: {style="font-size: 0.65em"}

- Build the container

```{.bash}
apptainer build lolcow.sif lolcow.def
```

- Execute a command inside the container

```{.bash}
apptainer exec lolcow.sif cowsay "Hello from Apptainer!"
```

- Run the container‚Äôs default script

```{.bash}
apptainer run lolcow.sif
```

This will execute the runscript section (which prints a date-stamped ASCII cow üêÑ message in rainbow colors üåà).

Once you create a SIF file, this is the container that you can transfer to Hoffman2 to run or share with others.

::: {.callout-note}
Can also build an SIF container from a Dockerfile
:::
:::

# Example 1: PyTorch

## Example 1: Writable containers :hammer_and_wrench:

::: { style="font-size: 0.65em"}

- This example uses [PyTorch](https://pytorch.org/) :brain:

- Similar to last week's example
  - Though, instead of using PyTorch's pre-build container, we will create our own container

:::: columns 
::: {.column width="50%"}

- Go to the `EX1` directory
  - Examine the `pytorch.py` file
  - Optimize a 3rd order polynomial to a sine function

:::
::: {.column width="50%"}

![](training_animation.gif)

:::
::::

:::

## Creating Sandbox container :rocket:

::: { style="font-size: 0.60em"}

- Create a container from a base source image 
  - DockerHub has great minimal base containers
    - [Ubuntu](https://hub.docker.com/_/ubuntu)
    - [Rocky Linux](https://hub.docker.com/_/rockylinux)
    - [CentOS](https://hub.docker.com/_/centos)

- Lets create a container based on Ubuntu 22.04

```{.bash}
apptainer build --sandbox ubuntu_22.04_SB/ docker://ubuntu:22.04
```

:::: columns
::: column

- `apptainer build`: 
  - Build new Apptainer container image
- `--sandbox`: 
  - Flag for "sandbox" or a writable directory
  
::: 
::: column

- `ubuntu_22.04_SB/`
  - Name of the directory where the sandbox image will be created
- `docker://ubuntu:22.04`
  - Location of source image

:::
::::

This will create a Sandbox container **ubuntu_22.04_SB**

:::

## Running the container :runner: 

::: { style="font-size: 0.80em"}

Next, we will start a WRITABLE interactive shell session in the sandbox image:

```{.bash}
sudo apptainer shell --writable ubuntu_22.04_SB/
```

- `--writable` will allow us to modify the container

From here, we can run any commands we need to install PyTorch:

```{.bash}
apt update
apt install -y python3 python3-pip
pip3 install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cpu
exit
```

Convert the sandbox container to a SIF file, `pytorch.sif`

```{.bash}
sudo apptainer build pytorch.sif ubuntu_22.04_SB/
```

:::

## Running Our Container :rocket: 

::: { style="font-size: 0.85em"}

Test our new SIF container:

```{.bash}
apptainer exec pytorch.sif python3 pytorch-code.py
```

We do not need to be root since we are just running python3.

Transfer our container:

```{.bash}
scp pytorch.sif USERNAME@hoffman2.idre.ucla.edu:
```

Example job script to run on Hoffman2:

```{.bash}
qsub pytorch.job
```


:::

# Example 2: Installing Scientific Code

## QUILL software üî¨

::: { style="font-size: 0.60em"}

In this example, we will create a container with a chemistry application that I created in Grad School. This code will calcuate the engery of a molecule. 

:::: columns 
::: {.column  width="60%"}

- Very early attempt at learning Hartree-Fock
  - Named from my pet hedgehog, Quill Ricker
- <https://github.com/charliecpeterson/QUILL>

To install, we need

- Python with the PySCF package
- Eigen3, a Linear Algebra library

::: 
::: {.column width="40%"}

<img src="quill.jpeg" width="50%">

:::
::::

We will build this container by:

- Apptainter definition file (.def)
- Using Docker/Podman (Dockerfile)

:::

## Apptainer Definition file üìú

::: { style="font-size: 0.55em"}

- Definition Files are like the blueprint to building a custom container. 
- Instead of interactively modifying a sandbox image, we can build a container with this Definition file
- The `quill.def` file has all steps needed to build the QUILL container.


``` {.bash code-line-numbers="|1-2|4-5|7-22|24-25"}
Bootstrap: docker
From: ubuntu:20.04

%labels
Author Charles Peterson <cpeterson@oarc.ucla.edu>

%post
apt-get update
DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
   git python3 python3-dev python3-pip \
   libeigen3-dev ca-certificates cmake make gcc g++
rm -rf /var/lib/apt/lists/*

pip3 install pyscf
ln -s /usr/bin/python3 /usr/bin/python
mkdir -pv /apps
cd /apps
git clone https://github.com/charliecpeterson/QUILL
cd QUILL
mkdir build ; cd build
cmake ..
make

%environment
export PATH=/apps/QUILL/build:$PATH
```

:::

## Create container üîß

::: { style="font-size: 0.85em"}
:::: columns
::: {.column width="50%"}

Create the `quill.sif` container  

::: 
::: {.column width="50%"}

```{.bash}
apptainer build quill.sif quill.def
```

:::
::::
::: fragment

- To Run this software, you would run
  - `QUILL.x test.inp`
  - Where **test.inp** is the input file
 
:::: columns
::: {.column width="50%"}
 
- Running the command inside the container

::: 
::: {.column width="50%"}

```{.bash}
apptainer exec quill.sif  QUILL.x test.inp
```

:::
::::
:::
::: fragment
:::: columns
::: {.column width="50%"}

- Move container to Hoffman2

::: 
::: {.column width="50%"}

```{.bash}
scp quill.sif USERNAME@hoffman2.idre.ucla.edu:
```

:::
::::
:::
:::

## Building using Docker/Podman üì§

::: { style="font-size: 0.85em"}

- Docker or Podman can be use to create containers
  - Then convert Docker/Podman container to SIF format

- I will be using Podman
  - Docker and Podman have same syntax
  - Replace `podman` with `docker`

:::: {.columns}

::: {.column width="50%"}

```{.bash}
docker build
docker images
docker pull
docker run
```

:::

::: {.column width="50%"}

```{.bash}
podman build
podman images
podman pull
podman run
```

:::
::::
:::

## Dockerfile for QUILL üõ†Ô∏è

::: { style="font-size: 0.80em"}

- `Dockerfile-quill` file is used by Docker to create container

```{.bash}
FROM ubuntu:20.04

## Author Charles Peterson <cpeterson@arc.ucla.edu>

RUN apt-get update \
     && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
   git python3 python3-dev python3-pip \
   libeigen3-dev ca-certificates cmake make gcc g++ \
   && rm -rf /var/lib/apt/lists/*

RUN pip3 install pyscf ; ln -s /usr/bin/python3 /usr/bin/python

RUN mkdir -pv /apps \
    && cd /apps \
    && git clone https://github.com/charliecpeterson/QUILL \
    && cd QUILL \
    && mkdir build ; cd build \
    && cmake .. ; make

ENV PATH=/apps/QUILL/build:$PATH
```

:::

## Container Creation üöÄ

::: { style="font-size: 0.80em"}

### Create Docker container

:::: columns
::: {.column width="50%"}

- Build container from Dockerfile

:::
::: {.column width="50%"}

```{.bash}
podman build . -t quill:1.0 -f Dockerfile-quill
```

:::
::::
:::: columns
::: {.column width="50%"}

- See built docker (podman) container

::: 
::: {.column width="50%"}

```{.bash}
podman image list
```

:::
::::

::: {.fragment}

### Create Apptainer container from Podman

:::: columns
::: {.column width="50%"}

- Save podman image in a tarball

::: 
::: {.column width="50%"}

```{.bash}
podman save quill:1.0 > quill.tar
```

:::
::::
:::: columns
::: {.column width="50%"}

- Create SIF file 

::: 
::: {.column width="50%"}

```{.bash}
apptainer build quill.sif docker-archive://quill.tar
```

:::
::::
:::: columns
::: {.column width="50%"}

- Transfer final SIF to Hoffman2

::: 
::: {.column width="50%"}

```{.bash}
scp quill.sif USERNAME@hoffman2.idre.ucla.edu:
```

:::
::::
:::
:::

## Container Registry üìì { style="font-size: 0.85em"}

In the previous slides, we created a SIF file (quill.sif), then transfer (scp) the container to Hoffman2.

<br/>

Instead of this, we can upload our container to a **Container Registry**.


- These **Registries** are used store our containers on a remote, cloud server that can then be pulled/download anywhere that has apptainer.
  - [DockerHub](https://hub.docker.com/)
  - [GitHub Packages](https://docs.github.com/en/packages/learn-github-packages/introduction-to-github-packages)

## DockerHub üìì { style="font-size: 0.75em"}

Lets create a repo on [DockerHub](https://hub.docker.com/)

- First, create a DockerHub account
  - Mine is `charliecpeterson`

- Push our podman container to DockerHub
  - Registry location `docker.io`

:::: {.columns .fragment} 
::: {.column width="50%"}

- Tag container to DockerHub location

::: 
::: {.column width="50%"}

```{.bash}
podman tag quill:1.0 docker.io/charliecpeterson/quill:1.0
```

:::
::::
:::: {.columns .fragment} 
::: {.column width="50%"}

- Login info to DockerHub

::: 
::: {.column width="50%"}

```{.bash}
podman login docker.io
```

:::
::::
:::: {.columns .fragment} 
::: {.column width="50%"}

- Push container to DockerHub

::: 
::: {.column width="50%"}

```{.bash}
podman push docker.io/charliecpeterson/quill:1.0
```

:::
::::
:::: {.columns .fragment} 
::: {.column width="50%"}

- Then pull the container on Hoffman2

:::
::: {.column width="50%"}

```{.bash}
apptainer pull docker://docker.io/charliecpeterson/quill:1.0
```

:::
::::

## GitHub Packages üìì

::: { style="font-size: 0.75em"}

- Lets create a repo on [GitHub](https://github.com/) 
  - Look for the Packages tab

- Same syntax as before
  - registry location is `ghcr.io`

:::: {.columns} 
::: {.column width="50%"}

Push our final container to GitHub

:::
::: {.column width="50%"}

```{.bash}
podman tag quill:1.0 ghcr.io/charliecpeterson/quill:1.0
podman push ghcr.io/charliecpeterson/quill:1.0
```

:::
::::
:::: {.columns } 
::: {.column width="50%"}

Then pull the container on Hoffman2

:::  
::: {.column width="50%"}

```{.bash}
apptainer pull docker://ghcr.io/charliecpeterson/quill:1.0
```

:::
::::

DockerHub and GitHub Packages are popular cloud registries. You can
create and deploy a local container registry. 

- <https://docs.docker.com/registry/deploying/>

:::

## Running Container üèÉ

::: { style="font-size: 0.75em"}

Once the container is on Hoffman2, submit job.

```{.bash}
#!/bin/bash
#$ -cwd
#$ -o quill.$JOB_ID
#$ -j y
#$ -l h_rt=1:00:00,h_data=15G
#$ -pe shared 1
#$ -l arch=intel-gold*

# load the job environment:
. /u/local/Modules/default/init/modules.sh
module load apptainer

# Container part: apptainer exec QUILL.sif
# Command: QUILL.x /apps/QUILL/input.inp
apptainer exec quill.sif QUILL.x test.inp
```

::: fragment
:::: columns
::: column

Submit job script

:::
::: column

```{.bash}
qsub test.job
```

:::
::::
:::
::: fragment

More information on using [Definition files](https://apptainer.org/docs/user/1.0/definition_files.html)

More information on using [Dockerfiles](https://docs.docker.com/engine/reference/builder/)

:::
:::

# Example 3: MiniForge üêç

::: { style="font-size: 0.75em"}

MiniForge is a very popular python and R distributaion for simplifying package installation via the conda package manager

- Check out my [Hoffman2 Happy Hour on Anaconda](https://github.com/ucla-oarc-hpc/H2HH_anaconda) on our GitHub workshop page

MiniForge can be tricky installing in a container due to environment setup.

This example will use MiniForge to install an application in a container.

:::

## Building H2O üíß

::: { style="font-size: 0.75em"}

:::: columns
::: column

We will go over creating a definition file for a example with MiniForge

We will install the software [h2o.ai](https://h2o.ai/). This is a great
machine learning platform that has Python and R libraries.

:::
::: column

<img src="h2o.png" width="50%">

:::
::::

In this example, we will use MiniForge to install h2o packages inside
python and R.

:::

## H2O definition file üìú

::: { style="font-size: 0.65em"}

- The `h2o.def` file
  - Use of `%runscript` to setup MiniForge env for `apptainer run`
    - the `$@` take arguments as a string from the command line

```{.bash}
Bootstrap: docker
From: ubuntu:22.04

%labels
Author Charles Peterson <cpeterson@oarc.ucla.edu>

%post
export DEBIAN_FRONTEND=noninteractive
apt -y update ; apt -y upgrade
apt install -y  wget libbz2-dev wget git gcc  libreadline-dev zlib1g-dev default-jre default-jdk

#Install Miniforge
cd /tmp
wget https://github.com/conda-forge/miniforge/releases/download/24.11.3-0/Miniforge3-24.11.3-0-Linux-x86_64.sh
bash Miniforge3-24.11.3-0-Linux-x86_64.sh -b -p /opt/miniforge
bash -c "source /opt/miniforge/etc/profile.d/conda.sh
conda create -n h2oai h2o -c h2oai -c conda-forge
"

%runscript
exec bash -c "source /opt/miniforge/etc/profile.d/conda.sh
conda activate h2oai
$@"
```

In the runscript, it will activate the conda environment, h2oai, and run the command that follows the `apptainer run h2o.sif` command

:::

## Building container üîß { style="font-size: 0.75em"}

:::: {.columns} 
::: {.column width="50%"}

- Create h2o.sif

::: 
::: {.column width="50%"}

```{.bash}
apptainer build h2o.sif h2o.def
```

:::
::::
:::: {.columns} 
::: {.column width="50%"}

- Run python inside the container

:::  
::: {.column width="50%"}

```{.bash}
apptainer run h2o.sif "python h2o-test.py"
```

:::
::::
::: {.fragment}
::: callout-note

- `apptainer exec foo.sif [COMMAND]` 
  - Run a single [COMMAND] inside the container
  - The runscript will NOT run

- `apptainer run foo.sif` 
  - Run the runscript inside the container
  
:::
:::

# Example 4: Jupyter

## Using Jupyter üêç

::: { style="font-size: 0.65em"}

:::: columns
::: column

This example will show how to create a Jupyter container and start a Jupyter on Hoffman2

:::
::: column

<img src="jupyter.png" width="50%">

:::
::::

- Create a container with Jupyter
  - Useful so you can run same Jupyter setup anywhere
  - Install all packages you need in container

:::

## Creating Jupyter container üêç

::: { style="font-size: 0.65em"}

- `jupyter.def`
  - Apptainer Def file
  - Starts with a pre-built python 3.8.13 container
  - Adds jupyter, pandas, and seaborn 

::: {.columns .fragment} 
::: {.column width="50%"}

- Build container (locally)
- Transfer to H2

::: 
::: {.column width="50%"}

```{.bash}
apptainer build jupyter.sif jupyter.def 
scp jupyter.sif hoffman2.idre.ucla.edu:
```

:::
:::
:::

## Running Jupyter üèÉ

::: { style="font-size: 0.65em"}
::: {.columns .fragment} 
::: {.column width="50%"}

- Start Jupyter on Hoffman2
  - Note the name of compute node you landed on for SSH tunneling

::: 
::: {.column width="50%"}

```{.bash}
qrsh -l h_data=10G
module load apptainer
hostname
apptainer exec jupyter.sif jupyter lab --ip 0.0.0.0
```

:::
:::
::: {.columns .fragment} 
::: {.column width="50%"}

- SSH tunnel to H2 compute node
  - Change nXXX (compute node)
  - Change port 8888 if needed

::: 
::: {.column width="50%"}

```{.bash}
ssh  -L 8888:nXXX:8888 username@hoffman2.idre.ucla.edu 
```

:::
:::
::: {.columns .fragment} 
::: {.column width="50%"}
- Then open a web browser and type
::: 
::: {.column width="50%"}
```{.bash}
http://localhost:8888 
```

:::
:::
:::

# Wrap Up

## Tips :hammer_and_wrench: {.smaller}

Size of container

- Try to keep the size of your container small and minimal
    - Only have the things necessary for your applications to run
- Large containers will need more **memory** and will take more time to start up
- Check out `Multi-Stage` approach

::: fragment

- Build from an existing container
  - Look for images on DockerHub, NGC
  - Build your own and upload to DockerHub/GitHub

:::

::: fragment

- Good idea to build a sandbox container, then create definition file
  - Test out commands in sandbox while making the def file!
    
:::

## More Things to Think About :brain: { style="font-size: 0.85em"}

- Share .sif files with your friends!
  - Save your (Docker) containers to DockerHub or GitHub Packages
  - Create Dockerfile/Def files to recreate or modify containers
- Find examples of Dockerfiles and Apptainer def files on our GitHub Page
  - <https://github.com/ucla-oarc-hpc/hpc_containers>

::: fragment

- Use DMTCP Checkpointing with Containers!!
    - <https://apptainer.org/docs/user/main/checkpoint.html>

:::

# Thank you! :pray: {.smaller}

Questions? Comments? :thinking:

Charles Peterson
[cpeterson\@oarc.ucla.edu](mailto:cpeterson@oarc.ucla.edu){.email}

![](padfoot.jpeg){width="800" height="450"}